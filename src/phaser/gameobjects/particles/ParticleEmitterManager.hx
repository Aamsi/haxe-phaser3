package phaser.gameobjects.particles;

@:native("Phaser.GameObjects.Particles.ParticleEmitterManager")
extern class ParticleEmitterManager extends phaser.gameobjects.GameObject {
    public function new(scene:phaser.Scene, texture:String, ?frame:Dynamic, ?emitters:Dynamic);
    public var timeScale:Float;
    public var texture:phaser.textures.Texture;
    public var frame:phaser.textures.Frame;
    public var frameNames:Array<String>;
    public var emitters:Dynamic;
    public var wells:Dynamic;
    public function setTexture(key:String, ?frame:Dynamic):phaser.gameobjects.particles.ParticleEmitterManager;
    public function setFrame(?frame:Dynamic):phaser.gameobjects.particles.ParticleEmitterManager;
    public function setEmitterFrames(frames:Dynamic, emitter:phaser.gameobjects.particles.ParticleEmitter):phaser.gameobjects.particles.ParticleEmitterManager;
    public function addEmitter(emitter:phaser.gameobjects.particles.ParticleEmitter):phaser.gameobjects.particles.ParticleEmitter;
    public function createEmitter(config:ParticleEmitterConfig):phaser.gameobjects.particles.ParticleEmitter;
    public function addGravityWell(well:phaser.gameobjects.particles.GravityWell):phaser.gameobjects.particles.GravityWell;
    public function createGravityWell(config:GravityWellConfig):phaser.gameobjects.particles.GravityWell;
    public function emitParticle(?count:Int, ?x:Float, ?y:Float):phaser.gameobjects.particles.ParticleEmitterManager;
    public function emitParticleAt(?x:Float, ?y:Float, ?count:Int):phaser.gameobjects.particles.ParticleEmitterManager;
    public function pause():phaser.gameobjects.particles.ParticleEmitterManager;
    public function resume():phaser.gameobjects.particles.ParticleEmitterManager;
    public function getProcessors():Array<phaser.gameobjects.particles.GravityWell>;
    public function preUpdate(time:Int, delta:Float):Void;
    public var depth:Float;
    public function setDepth(value:Int):Dynamic;
    public var defaultPipeline:phaser.renderer.webgl.WebGLPipeline;
    public var pipeline:phaser.renderer.webgl.WebGLPipeline;
    public function initPipeline(pipelineName:String):Bool;
    public function setPipeline(pipelineName:String):Dynamic;
    public function resetPipeline():Bool;
    public function getPipelineName():String;
    public var x:Float;
    public var y:Float;
    public var z:Float;
    public var w:Float;
    public var scaleX:Float;
    public var scaleY:Float;
    public var angle:Int;
    public var rotation:Float;
    public function setPosition(?x:Float, ?y:Float, ?z:Float, ?w:Float):Dynamic;
    public function setRandomPosition(?x:Float, ?y:Float, ?width:Float, ?height:Float):Dynamic;
    public function setRotation(?radians:Float):Dynamic;
    public function setAngle(?degrees:Float):Dynamic;
    public function setScale(x:Float, ?y:Float):Dynamic;
    public function setX(?value:Float):Dynamic;
    public function setY(?value:Float):Dynamic;
    public function setZ(?value:Float):Dynamic;
    public function setW(?value:Float):Dynamic;
    public function getLocalTransformMatrix(?tempMatrix:phaser.gameobjects.components.TransformMatrix):phaser.gameobjects.components.TransformMatrix;
    public function getWorldTransformMatrix(?tempMatrix:phaser.gameobjects.components.TransformMatrix, ?parentMatrix:phaser.gameobjects.components.TransformMatrix):phaser.gameobjects.components.TransformMatrix;
    public var visible:Bool;
    public function setVisible(value:Bool):Dynamic;
}
