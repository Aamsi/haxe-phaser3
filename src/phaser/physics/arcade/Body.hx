package phaser.physics.arcade;

@:native("Phaser.Physics.Arcade.Body")
extern class Body {
    public function new(world:phaser.physics.arcade.World, gameObject:phaser.gameobjects.GameObject);
    public var world:phaser.physics.arcade.World;
    public var gameObject:phaser.gameobjects.GameObject;
    public var transform:Dynamic;
    public var debugShowBody:Bool;
    public var debugShowVelocity:Bool;
    public var debugBodyColor:Int;
    public var enable:Bool;
    public var isCircle:Bool;
    public var radius:Float;
    public var offset:phaser.math.Vector2;
    public var position:phaser.math.Vector2;
    public var prev:phaser.math.Vector2;
    public var allowRotation:Bool;
    public var rotation:Float;
    public var preRotation:Float;
    public var width:Float;
    public var height:Float;
    public var sourceWidth:Float;
    public var sourceHeight:Float;
    public var halfWidth:Float;
    public var halfHeight:Float;
    public var center:phaser.math.Vector2;
    public var velocity:phaser.math.Vector2;
    public var newVelocity:phaser.math.Vector2;
    public var deltaMax:phaser.math.Vector2;
    public var acceleration:phaser.math.Vector2;
    public var allowDrag:Bool;
    public var drag:phaser.math.Vector2;
    public var allowGravity:Bool;
    public var gravity:phaser.math.Vector2;
    public var bounce:phaser.math.Vector2;
    public var worldBounce:phaser.math.Vector2;
    public var onWorldBounds:Bool;
    public var onCollide:Bool;
    public var onOverlap:Bool;
    public var maxVelocity:phaser.math.Vector2;
    public var friction:phaser.math.Vector2;
    public var angularVelocity:Float;
    public var angularAcceleration:Float;
    public var angularDrag:Float;
    public var maxAngular:Float;
    public var mass:Float;
    public var angle:Float;
    public var speed:Float;
    public var facing:Int;
    public var immovable:Bool;
    public var moves:Bool;
    public var customSeparateX:Bool;
    public var customSeparateY:Bool;
    public var overlapX:Float;
    public var overlapY:Float;
    public var overlapR:Float;
    public var embedded:Bool;
    public var collideWorldBounds:Bool;
    public var checkCollision:ArcadeBodyCollision;
    public var touching:ArcadeBodyCollision;
    public var wasTouching:ArcadeBodyCollision;
    public var blocked:ArcadeBodyCollision;
    public var dirty:Bool;
    public var syncBounds:Bool;
    public var isMoving:Bool;
    public var stopVelocityOnCollide:Bool;
    public var physicsType:Int;
    public var x:Float;
    public var y:Float;
    public var left:Float;
    public var right:Float;
    public var top:Float;
    public var bottom:Float;
    public function updateBounds():Void;
    public function updateCenter():Void;
    public function update(delta:Float):Void;
    public function postUpdate():Void;
    public function checkWorldBounds():Bool;
    public function setOffset(x:Float, ?y:Float):phaser.physics.arcade.Body;
    public function setSize(width:Float, height:Float, ?center:Bool):phaser.physics.arcade.Body;
    public function setCircle(radius:Float, ?offsetX:Float, ?offsetY:Float):phaser.physics.arcade.Body;
    public function reset(x:Float, y:Float):Void;
    public function stop():phaser.physics.arcade.Body;
    public function getBounds(obj:ArcadeBodyBounds):ArcadeBodyBounds;
    public function hitTest(x:Float, y:Float):Bool;
    public function onFloor():Bool;
    public function onCeiling():Bool;
    public function onWall():Bool;
    public function deltaAbsX():Float;
    public function deltaAbsY():Float;
    public function deltaX():Float;
    public function deltaY():Float;
    public function deltaZ():Float;
    public function destroy():Void;
    public function drawDebug(graphic:phaser.gameobjects.Graphics):Void;
    public function willDrawDebug():Bool;
    public function setCollideWorldBounds(?value:Bool):phaser.physics.arcade.Body;
    public function setVelocity(x:Float, y:Float):phaser.physics.arcade.Body;
    public function setVelocityX(value:Float):phaser.physics.arcade.Body;
    public function setVelocityY(value:Float):phaser.physics.arcade.Body;
    public function setBounce(x:Float, y:Float):phaser.physics.arcade.Body;
    public function setBounceX(value:Float):phaser.physics.arcade.Body;
    public function setBounceY(value:Float):phaser.physics.arcade.Body;
    public function setAcceleration(x:Float, y:Float):phaser.physics.arcade.Body;
    public function setAccelerationX(value:Float):phaser.physics.arcade.Body;
    public function setAccelerationY(value:Float):phaser.physics.arcade.Body;
    public function setAllowDrag(?value:Bool):phaser.physics.arcade.Body;
    public function setAllowGravity(?value:Bool):phaser.physics.arcade.Body;
    public function setAllowRotation(?value:Bool):phaser.physics.arcade.Body;
    public function setDrag(x:Float, y:Float):phaser.physics.arcade.Body;
    public function setDragX(value:Float):phaser.physics.arcade.Body;
    public function setDragY(value:Float):phaser.physics.arcade.Body;
    public function setGravity(x:Float, y:Float):phaser.physics.arcade.Body;
    public function setGravityX(value:Float):phaser.physics.arcade.Body;
    public function setGravityY(value:Float):phaser.physics.arcade.Body;
    public function setFriction(x:Float, y:Float):phaser.physics.arcade.Body;
    public function setFrictionX(value:Float):phaser.physics.arcade.Body;
    public function setFrictionY(value:Float):phaser.physics.arcade.Body;
    public function setAngularVelocity(value:Float):phaser.physics.arcade.Body;
    public function setAngularAcceleration(value:Float):phaser.physics.arcade.Body;
    public function setAngularDrag(value:Float):phaser.physics.arcade.Body;
    public function setMass(value:Float):phaser.physics.arcade.Body;
    public function setImmovable(?value:Bool):phaser.physics.arcade.Body;
}
